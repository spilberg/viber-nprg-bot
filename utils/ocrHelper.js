// utils/ocrHelper.js
// –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ OCR

const sharp = require("sharp");
const Tesseract = require("tesseract.js");
const fs = require("fs").promises;

/**
 * –†—ñ–∑–Ω—ñ —Ä–µ–∂–∏–º–∏ –æ–±—Ä–æ–±–∫–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è OCR
 */
const ImageProcessingModes = {
  STANDARD: "standard",
  HIGH_CONTRAST: "high_contrast",
  DARK_TEXT: "dark_text",
  LIGHT_TEXT: "light_text",
  RECEIPT: "receipt", // –°–ø–µ—Ü—ñ–∞–ª—å–Ω–æ –¥–ª—è —á–µ–∫—ñ–≤
  BARCODE_AREA: "barcode_area", // –û–±–ª–∞—Å—Ç—å –±—ñ–ª—è —à—Ç—Ä–∏—Ö-–∫–æ–¥—É
};

/**
 * –ê–≥—Ä–µ—Å–∏–≤–Ω–∞ –æ–±—Ä–æ–±–∫–∞ —Å–ø–µ—Ü—ñ–∞–ª—å–Ω–æ –¥–ª—è —á–µ–∫—ñ–≤ –ù–æ–≤–æ—ó –ü–æ—à—Ç–∏
 */
async function processReceiptImage(imagePath) {
  const processedPath = `${imagePath}_receipt_processed.jpg`;

  try {
    // –û—Ç—Ä–∏–º—É—î–º–æ –º–µ—Ç–∞–¥–∞–Ω—ñ
    const metadata = await sharp(imagePath).metadata();
    const { width, height } = metadata;

    // –ó–±—ñ–ª—å—à—É—î–º–æ —Ä–æ–∑–º—ñ—Ä –¥–ª—è –∫—Ä–∞—â–æ–≥–æ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è
    const targetWidth = Math.max(width, 2000);

    await sharp(imagePath)
      .resize(targetWidth, null, {
        kernel: "lanczos3",
        fit: "inside",
      })
      // –ö–æ–Ω–≤–µ—Ä—Ç—É—î–º–æ –≤ —á–æ—Ä–Ω–æ-–±—ñ–ª–µ
      .grayscale()
      // –ù–æ—Ä–º–∞–ª—ñ–∑–∞—Ü—ñ—è (–ø–æ–∫—Ä–∞—â—É—î –∫–æ–Ω—Ç—Ä–∞—Å—Ç)
      .normalize()
      // –ó–±—ñ–ª—å—à–µ–Ω–Ω—è —Ä—ñ–∑–∫–æ—Å—Ç—ñ
      .sharpen({
        sigma: 2,
        m1: 1.5,
        m2: 0.5,
      })
      // –ó–±—ñ–ª—å—à–µ–Ω–Ω—è –∫–æ–Ω—Ç—Ä–∞—Å—Ç—É
      .linear(1.3, -(128 * 0.3))
      // –ë—ñ–Ω–∞—Ä–∏–∑–∞—Ü—ñ—è (—á–æ—Ä–Ω–æ-–±—ñ–ª–µ –±–µ–∑ –≤—ñ–¥—Ç—ñ–Ω–∫—ñ–≤ —Å—ñ—Ä–æ–≥–æ)
      .threshold(140)
      // –í–∏—Å–æ–∫–∞ —è–∫—ñ—Å—Ç—å
      .jpeg({
        quality: 100,
        chromaSubsampling: "4:4:4",
      })
      .toFile(processedPath);

    return processedPath;
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è —á–µ–∫—É:", error);
    throw error;
  }
}

/**
 * –û–±—Ä–æ–±–∫–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ —Ä—ñ–∑–Ω–∏–º–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏
 */
async function processImageWithMode(
  imagePath,
  mode = ImageProcessingModes.STANDARD
) {
  const processedPath = `${imagePath}_${mode}.jpg`;

  let processor = sharp(imagePath).resize(2000, null, {
    withoutEnlargement: false,
    fit: "inside",
    kernel: "lanczos3",
  });

  switch (mode) {
    case ImageProcessingModes.RECEIPT:
      processor = processor
        .grayscale()
        .normalize()
        .sharpen({ sigma: 2 })
        .linear(1.3, -(128 * 0.3))
        .threshold(140);
      break;

    case ImageProcessingModes.HIGH_CONTRAST:
      processor = processor
        .greyscale()
        .normalize()
        .linear(1.5, -(128 * 0.5))
        .sharpen({ sigma: 2 });
      break;

    case ImageProcessingModes.DARK_TEXT:
      processor = processor.greyscale().normalize().threshold(128);
      break;

    case ImageProcessingModes.LIGHT_TEXT:
      processor = processor.greyscale().negate().normalize().threshold(128);
      break;

    case ImageProcessingModes.BARCODE_AREA:
      // –û–±—Ä–æ–±–∫–∞ –æ–±–ª–∞—Å—Ç—ñ –Ω–∞–≤–∫–æ–ª–æ —à—Ç—Ä–∏—Ö-–∫–æ–¥—É
      processor = processor
        .grayscale()
        .normalize()
        .sharpen({ sigma: 3 })
        .linear(1.4, -(128 * 0.4))
        .threshold(130);
      break;

    default: // STANDARD
      processor = processor.greyscale().normalize().sharpen();
  }

  await processor.jpeg({ quality: 95 }).toFile(processedPath);
  return processedPath;
}

/**
 * –ü–æ–∫—Ä–∞—â–µ–Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –∑ –º–Ω–æ–∂–∏–Ω–Ω–∏–º–∏ —Å–ø—Ä–æ–±–∞–º–∏
 */
async function recognizeNumbers(imagePath, language = "ukr+rus+eng") {
  try {
    const {
      data: { text, confidence },
    } = await Tesseract.recognize(imagePath, language, {
      logger: () => {},
      tessedit_char_whitelist: "0123456789 ",
      tessedit_pageseg_mode: Tesseract.PSM.AUTO,
    });

    console.log(`OCR –≤–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å: ${confidence}%`);
    console.log(`–†–æ–∑–ø—ñ–∑–Ω–∞–Ω–∏–π —Ç–µ–∫—Å—Ç:\n${text.substring(0, 500)}`);

    return extractTrackingNumbers(text);
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ OCR:", error);
    return [];
  }
}

/**
 * –°–ø—Ä–æ–±–∞ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –∑ —Ä—ñ–∑–Ω–∏–º–∏ —Ä–µ–∂–∏–º–∞–º–∏ –æ–±—Ä–æ–±–∫–∏
 */
async function extractWithMultipleModes(imagePath) {
  console.log("üîç –°–ø—Ä–æ–±–∞ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –∑ —Ä—ñ–∑–Ω–∏–º–∏ —Ä–µ–∂–∏–º–∞–º–∏...\n");

  const modes = [
    ImageProcessingModes.RECEIPT,
    ImageProcessingModes.BARCODE_AREA,
    ImageProcessingModes.HIGH_CONTRAST,
    ImageProcessingModes.DARK_TEXT,
    ImageProcessingModes.STANDARD,
  ];

  const allFoundNumbers = new Set();

  for (const mode of modes) {
    try {
      console.log(`–†–µ–∂–∏–º: ${mode}`);
      const processedPath = await processImageWithMode(imagePath, mode);

      // –°–ø—Ä–æ–±–∞ –∑ —Ä—ñ–∑–Ω–∏–º–∏ –º–æ–≤–∞–º–∏
      const languages = ["eng", "ukr+eng", "ukr+rus+eng"];

      for (const lang of languages) {
        const numbers = await recognizeNumbers(processedPath, lang);

        if (numbers.length > 0) {
          console.log(
            `‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ ${numbers.length} –Ω–æ–º–µ—Ä(—ñ–≤) –≤ —Ä–µ–∂–∏–º—ñ ${mode} (${lang})`
          );
          numbers.forEach((num) => allFoundNumbers.add(num));

          // –Ø–∫—â–æ –∑–Ω–∞–π—à–ª–∏ - –º–æ–∂–Ω–∞ –∑—É–ø–∏–Ω–∏—Ç–∏—Å—è
          await fs.unlink(processedPath).catch(() => {});
          return Array.from(allFoundNumbers);
        }
      }

      // –í–∏–¥–∞–ª—è—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª
      await fs.unlink(processedPath).catch(() => {});
    } catch (error) {
      console.error(`–ü–æ–º–∏–ª–∫–∞ –≤ —Ä–µ–∂–∏–º—ñ ${mode}:`, error.message);
    }
  }

  return Array.from(allFoundNumbers);
}

/**
 * –í–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è –Ω–æ–º–µ—Ä—ñ–≤ –Ω–∞–∫–ª–∞–¥–Ω–∏—Ö –∑ —Ç–µ–∫—Å—Ç—É
 */
function extractTrackingNumbers(text) {
  // –û—á–∏—â–∞—î–º–æ —Ç–µ–∫—Å—Ç –≤—ñ–¥ –∑–∞–π–≤–∏—Ö —Å–∏–º–≤–æ–ª—ñ–≤
  const cleanText = text
    .replace(/[^\d\s\n]/g, " ") // –ó–∞–ª–∏—à–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ —Ü–∏—Ñ—Ä–∏ —Ç–∞ –ø—Ä–æ–±—ñ–ª–∏
    .replace(/\s+/g, " "); // –ú–Ω–æ–∂–∏–Ω–Ω—ñ –ø—Ä–æ–±—ñ–ª–∏ –≤ –æ–¥–∏–Ω

  console.log(`–û—á–∏—â–µ–Ω–∏–π —Ç–µ–∫—Å—Ç: ${cleanText.substring(0, 200)}`);

  const patterns = [
    /\b(\d{14})\b/g, // 14 —Ü–∏—Ñ—Ä –ø—ñ–¥—Ä—è–¥
    /\b(\d{4}\s?\d{4}\s?\d{4}\s?\d{2})\b/g, // –ó –ø—Ä–æ–±—ñ–ª–∞–º–∏
    /(\d{5}\s?\d{4}\s?\d{4}\s?\d{1})/g, // –Ü–Ω—à–∏–π —Ñ–æ—Ä–º–∞—Ç
  ];

  const foundNumbers = new Set();

  patterns.forEach((pattern) => {
    const matches = cleanText.match(pattern);
    if (matches) {
      matches.forEach((match) => {
        const cleanNumber = match.replace(/\D/g, "");
        if (cleanNumber.length === 14 && isValidTrackingNumber(cleanNumber)) {
          console.log(`‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª—ñ–¥–Ω–∏–π –Ω–æ–º–µ—Ä: ${cleanNumber}`);
          foundNumbers.add(cleanNumber);
        }
      });
    }
  });

  // –î–æ–¥–∞—Ç–∫–æ–≤–∏–π –ø–æ—à—É–∫ - –ø–æ—Å–ª—ñ–¥–æ–≤–Ω–æ—Å—Ç—ñ 14 —Ü–∏—Ñ—Ä –¥–µ –∑–∞–≤–≥–æ–¥–Ω–æ
  const allDigits = text.replace(/\D/g, "");
  for (let i = 0; i <= allDigits.length - 14; i++) {
    const candidate = allDigits.substring(i, i + 14);
    if (isValidTrackingNumber(candidate)) {
      console.log(`‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –≤–∞–ª—ñ–¥–Ω–∏–π –Ω–æ–º–µ—Ä (–ø–æ—Å–ª—ñ–¥–æ–≤–Ω—ñ—Å—Ç—å): ${candidate}`);
      foundNumbers.add(candidate);
    }
  }

  return Array.from(foundNumbers);
}

/**
 * –ë–∞–∑–æ–≤–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è –Ω–æ–º–µ—Ä–∞ –Ω–∞–∫–ª–∞–¥–Ω–æ—ó
 */
function isValidTrackingNumber(number) {
  // –ù–æ–º–µ—Ä –º–∞—î –±—É—Ç–∏ 14 —Ü–∏—Ñ—Ä
  if (!/^\d{14}$/.test(number)) {
    return false;
  }

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —â–æ –Ω–µ –≤—Å—ñ —Ü–∏—Ñ—Ä–∏ –æ–¥–Ω–∞–∫–æ–≤—ñ
  if (/^(\d)\1{13}$/.test(number)) {
    return false;
  }

  // –ü–µ—Ä—à—ñ 4 —Ü–∏—Ñ—Ä–∏ –∑–∞–∑–≤–∏—á–∞–π —Ä—ñ–∫ (–ø—Ä–µ—Ñ—ñ–∫—Å –ù–ü –∞–±–æ —Ä—ñ–∫)
  const prefix = number.substring(0, 4);
  const prefixNum = parseInt(prefix);

  // –ù–ü –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î –ø—Ä–µ—Ñ—ñ–∫—Å–∏ 5900-5999 –∞–±–æ —Ä–æ–∫–∏ 2000-2099
  if (
    (prefixNum >= 5900 && prefixNum <= 5999) ||
    (prefixNum >= 2000 && prefixNum <= 2099)
  ) {
    return true;
  }

  return false;
}

/**
 * –ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–µ—Ä–µ–¥ OCR (–∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –≤–∏–±—ñ—Ä –∫—Ä–∞—â–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤)
 */
async function analyzeImage(imagePath) {
  const metadata = await sharp(imagePath).metadata();
  const stats = await sharp(imagePath).stats();

  // –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —è—Å–∫—Ä–∞–≤–æ—Å—Ç—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
  const channels = stats.channels;
  const avgBrightness =
    channels.reduce((sum, ch) => sum + ch.mean, 0) / channels.length;

  return {
    width: metadata.width,
    height: metadata.height,
    brightness: avgBrightness,
    isDark: avgBrightness < 100,
    isLight: avgBrightness > 200,
    isReceipt: metadata.width < 800, // –ß–µ–∫–∏ –∑–∞–∑–≤–∏—á–∞–π –≤—É–∑—å–∫—ñ
    format: metadata.format,
  };
}

/**
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –≤–∏–±—ñ—Ä –Ω–∞–π–∫—Ä–∞—â–æ–≥–æ —Ä–µ–∂–∏–º—É –æ–±—Ä–æ–±–∫–∏
 */
async function suggestProcessingMode(imagePath) {
  const imageInfo = await analyzeImage(imagePath);

  console.log("üìä –ê–Ω–∞–ª—ñ–∑ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è:", imageInfo);

  if (imageInfo.isReceipt) {
    return ImageProcessingModes.RECEIPT;
  } else if (imageInfo.isDark) {
    return ImageProcessingModes.LIGHT_TEXT;
  } else if (imageInfo.isLight) {
    return ImageProcessingModes.DARK_TEXT;
  } else {
    return ImageProcessingModes.HIGH_CONTRAST;
  }
}

/**
 * –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–º –≤–∏–±–æ—Ä–æ–º —Ä–µ–∂–∏–º—É
 */
async function smartExtract(imagePath) {
  try {
    console.log("üöÄ –ü–æ—á–∞—Ç–æ–∫ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è...");
    console.log(`üìÑ –§–∞–π–ª: ${imagePath}\n`);

    // –ê–Ω–∞–ª—ñ–∑ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    const imageInfo = await analyzeImage(imagePath);
    console.log(`üìä –†–æ–∑–º—ñ—Ä: ${imageInfo.width}x${imageInfo.height}`);
    console.log(`üí° –Ø—Å–∫—Ä–∞–≤—ñ—Å—Ç—å: ${imageInfo.brightness.toFixed(1)}\n`);

    // –°–ø—Ä–æ–±–∞ –∑ —É—Å—ñ–º–∞ —Ä–µ–∂–∏–º–∞–º–∏
    const numbers = await extractWithMultipleModes(imagePath);

    if (numbers.length === 0) {
      console.log(
        "\n‚ö†Ô∏è  –ù–æ–º–µ—Ä–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±–∞ –∑ –ø–æ—Å–ª–∞–±–ª–µ–Ω–∏–º–∏ –ø—Ä–∞–≤–∏–ª–∞–º–∏..."
      );

      // –û—Å—Ç–∞–Ω–Ω—ñ–π —à–∞–Ω—Å - –±–µ–∑ –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó
      const processedPath = await processReceiptImage(imagePath);
      const {
        data: { text },
      } = await Tesseract.recognize(processedPath, "eng+ukr");
      await fs.unlink(processedPath).catch(() => {});

      console.log("üìù –í–µ—Å—å —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–∏–π —Ç–µ–∫—Å—Ç:");
      console.log(text);
      console.log("\n");

      // –®—É–∫–∞—î–º–æ –±—É–¥—å-—è–∫—ñ 14-–∑–Ω–∞—á–Ω—ñ —á–∏—Å–ª–∞
      const allDigits = text.replace(/\D/g, "");
      console.log(`üî¢ –í—Å—ñ —Ü–∏—Ñ—Ä–∏: ${allDigits.substring(0, 100)}...`);

      for (let i = 0; i <= allDigits.length - 14; i++) {
        const candidate = allDigits.substring(i, i + 14);
        console.log(`–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞: ${candidate}`);
        numbers.push(candidate);
      }
    }

    return [...new Set(numbers)]; // –£–Ω—ñ–∫–∞–ª—å–Ω—ñ –∑–Ω–∞—á–µ–Ω–Ω—è
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ smart extract:", error);
    throw error;
  }
}

/**
 * –û—á–∏—â–µ–Ω–Ω—è –ø–∞–ø–∫–∏ –∑ —Ç–∏–º—á–∞—Å–æ–≤–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏
 */
async function cleanupOldFiles(uploadsDir, maxAgeHours = 24) {
  try {
    const files = await fs.readdir(uploadsDir);
    const now = Date.now();
    const maxAge = maxAgeHours * 60 * 60 * 1000;

    for (const file of files) {
      const filePath = `${uploadsDir}/${file}`;
      const stats = await fs.stat(filePath);

      if (now - stats.mtimeMs > maxAge) {
        await fs.unlink(filePath);
        console.log(`–í–∏–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä–∏–π —Ñ–∞–π–ª: ${file}`);
      }
    }
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è:", error);
  }
}

module.exports = {
  ImageProcessingModes,
  processImageWithMode,
  processReceiptImage,
  extractWithMultipleModes,
  recognizeNumbers,
  extractTrackingNumbers,
  isValidTrackingNumber,
  analyzeImage,
  suggestProcessingMode,
  smartExtract,
  cleanupOldFiles,
};

/**
 * –û–±—Ä–æ–±–∫–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∑ —Ä—ñ–∑–Ω–∏–º–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏
 * @param {string} imagePath - —à–ª—è—Ö –¥–æ –æ—Ä–∏–≥—ñ–Ω–∞–ª—å–Ω–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
 * @param {string} mode - —Ä–µ–∂–∏–º –æ–±—Ä–æ–±–∫–∏
 * @returns {string} - —à–ª—è—Ö –¥–æ –æ–±—Ä–æ–±–ª–µ–Ω–æ–≥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
 */
async function processImageWithMode(
  imagePath,
  mode = ImageProcessingModes.STANDARD
) {
  const processedPath = `${imagePath}_${mode}.jpg`;

  let processor = sharp(imagePath).resize(1600, null, {
    withoutEnlargement: true,
    fit: "inside",
  });

  switch (mode) {
    case ImageProcessingModes.HIGH_CONTRAST:
      processor = processor
        .greyscale()
        .normalize()
        .linear(1.5, -(128 * 0.5)) // –ó–±—ñ–ª—å—à–µ–Ω–Ω—è –∫–æ–Ω—Ç—Ä–∞—Å—Ç—É
        .sharpen({ sigma: 2 });
      break;

    case ImageProcessingModes.DARK_TEXT:
      processor = processor.greyscale().normalize().threshold(128); // –ë—ñ–Ω–∞—Ä–∏–∑–∞—Ü—ñ—è
      break;

    case ImageProcessingModes.LIGHT_TEXT:
      processor = processor
        .greyscale()
        .negate() // –Ü–Ω–≤–µ—Ä—Å—ñ—è –∫–æ–ª—å–æ—Ä—ñ–≤
        .normalize()
        .threshold(128);
      break;

    default: // STANDARD
      processor = processor.greyscale().normalize().sharpen();
  }

  await processor.jpeg({ quality: 95 }).toFile(processedPath);
  return processedPath;
}

/**
 * –°–ø—Ä–æ–±–∞ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –∑ —Ä—ñ–∑–Ω–∏–º–∏ —Ä–µ–∂–∏–º–∞–º–∏ –æ–±—Ä–æ–±–∫–∏
 * @param {string} imagePath - —à–ª—è—Ö –¥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
 * @returns {Array} - –∑–Ω–∞–π–¥–µ–Ω—ñ –Ω–æ–º–µ—Ä–∏ –Ω–∞–∫–ª–∞–¥–Ω–∏—Ö
 */
async function extractWithMultipleModes(imagePath) {
  const modes = Object.values(ImageProcessingModes);
  const allFoundNumbers = new Set();

  for (const mode of modes) {
    try {
      const processedPath = await processImageWithMode(imagePath, mode);
      const numbers = await recognizeNumbers(processedPath);

      numbers.forEach((num) => allFoundNumbers.add(num));

      // –í–∏–¥–∞–ª—è—î–º–æ —Ç–∏–º—á–∞—Å–æ–≤–∏–π —Ñ–∞–π–ª
      await fs.unlink(processedPath).catch(() => {});

      // –Ø–∫—â–æ –∑–Ω–∞–π—à–ª–∏ —Ö–æ—á–∞ –± –æ–¥–∏–Ω –Ω–æ–º–µ—Ä, –º–æ–∂–Ω–∞ –∑—É–ø–∏–Ω–∏—Ç–∏—Å—è
      if (allFoundNumbers.size > 0) {
        console.log(`–£—Å–ø—ñ—à–Ω–æ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–æ –∑ —Ä–µ–∂–∏–º–æ–º: ${mode}`);
        break;
      }
    } catch (error) {
      console.error(`–ü–æ–º–∏–ª–∫–∞ –≤ —Ä–µ–∂–∏–º—ñ ${mode}:`, error.message);
    }
  }

  return Array.from(allFoundNumbers);
}

/**
 * –ë–∞–∑–æ–≤–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –Ω–æ–º–µ—Ä—ñ–≤
 * @param {string} imagePath - —à–ª—è—Ö –¥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
 * @returns {Array} - –∑–Ω–∞–π–¥–µ–Ω—ñ –Ω–æ–º–µ—Ä–∏
 */
async function recognizeNumbers(imagePath) {
  const {
    data: { text },
  } = await Tesseract.recognize(imagePath, "ukr+rus+eng", {
    logger: () => {}, // –í–∏–º–∫–Ω—É—Ç–∏ –ª–æ–≥–∏
  });

  return extractTrackingNumbers(text);
}

/**
 * –í–∏—Ç—è–≥—É–≤–∞–Ω–Ω—è –Ω–æ–º–µ—Ä—ñ–≤ –Ω–∞–∫–ª–∞–¥–Ω–∏—Ö –∑ —Ç–µ–∫—Å—Ç—É
 * @param {string} text - —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–∏–π —Ç–µ–∫—Å—Ç
 * @returns {Array} - –º–∞—Å–∏–≤ –∑–Ω–∞–π–¥–µ–Ω–∏—Ö –Ω–æ–º–µ—Ä—ñ–≤
 */
function extractTrackingNumbers(text) {
  const patterns = [
    /\b\d{14}\b/g,
    /\b\d{4}\s?\d{4}\s?\d{4}\s?\d{2}\b/g,
    /‚Ññ?\s?(\d{4}[\s\-]?\d{4}[\s\-]?\d{4}[\s\-]?\d{2})/g,
    /–Ω–∞–∫–ª–∞–¥–Ω–∞[^\d]*(\d{14})/gi,
    /–¢–¢–ù[^\d]*(\d{14})/gi,
    /–≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–Ω—è[^\d]*(\d{14})/gi,
    /–Ω–æ–º–µ—Ä[^\d]*(\d{14})/gi,
    /\bEN[^\d]*(\d{14})/gi, // –ê–Ω–≥–ª—ñ–π—Å—å–∫–∞ –∞–±—Ä–µ–≤—ñ–∞—Ç—É—Ä–∞
  ];

  const foundNumbers = new Set();

  patterns.forEach((pattern) => {
    const matches = text.match(pattern);
    if (matches) {
      matches.forEach((match) => {
        const cleanNumber = match.replace(/\D/g, "");
        if (cleanNumber.length === 14 && isValidTrackingNumber(cleanNumber)) {
          foundNumbers.add(cleanNumber);
        }
      });
    }
  });

  return Array.from(foundNumbers);
}

/**
 * –ë–∞–∑–æ–≤–∞ –≤–∞–ª—ñ–¥–∞—Ü—ñ—è –Ω–æ–º–µ—Ä–∞ –Ω–∞–∫–ª–∞–¥–Ω–æ—ó
 * @param {string} number - –Ω–æ–º–µ—Ä –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏
 * @returns {boolean}
 */
function isValidTrackingNumber(number) {
  // –ù–æ–º–µ—Ä –º–∞—î –±—É—Ç–∏ 14 —Ü–∏—Ñ—Ä
  if (!/^\d{14}$/.test(number)) {
    return false;
  }

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —â–æ –Ω–µ –≤—Å—ñ —Ü–∏—Ñ—Ä–∏ –æ–¥–Ω–∞–∫–æ–≤—ñ
  if (/^(\d)\1{13}$/.test(number)) {
    return false;
  }

  // –ü–µ—Ä—à—ñ 4 —Ü–∏—Ñ—Ä–∏ –∑–∞–∑–≤–∏—á–∞–π —Ä—ñ–∫ (20XX –∞–±–æ 21XX)
  const year = number.substring(0, 4);
  const yearNum = parseInt(year);
  if (yearNum < 2000 || yearNum > 2099) {
    return false;
  }

  return true;
}

/**
 * –ü–æ–∫—Ä–∞—â–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–µ—Ä–µ–¥ OCR (–∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –≤–∏–±—ñ—Ä –∫—Ä–∞—â–∏—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä—ñ–≤)
 * @param {string} imagePath - —à–ª—è—Ö –¥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
 * @returns {Object} - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –¥–ª—è –≤–∏–±–æ—Ä—É —Ä–µ–∂–∏–º—É
 */
async function analyzeImage(imagePath) {
  const metadata = await sharp(imagePath).metadata();
  const stats = await sharp(imagePath).stats();

  // –í–∏–∑–Ω–∞—á–µ–Ω–Ω—è —è—Å–∫—Ä–∞–≤–æ—Å—Ç—ñ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
  const channels = stats.channels;
  const avgBrightness =
    channels.reduce((sum, ch) => sum + ch.mean, 0) / channels.length;

  return {
    width: metadata.width,
    height: metadata.height,
    brightness: avgBrightness,
    isDark: avgBrightness < 127,
    isLight: avgBrightness > 200,
    format: metadata.format,
  };
}

/**
 * –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–π –≤–∏–±—ñ—Ä –Ω–∞–π–∫—Ä–∞—â–æ–≥–æ —Ä–µ–∂–∏–º—É –æ–±—Ä–æ–±–∫–∏
 * @param {string} imagePath - —à–ª—è—Ö –¥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
 * @returns {string} - —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∏–π —Ä–µ–∂–∏–º
 */
async function suggestProcessingMode(imagePath) {
  const imageInfo = await analyzeImage(imagePath);

  if (imageInfo.isDark) {
    return ImageProcessingModes.LIGHT_TEXT;
  } else if (imageInfo.isLight) {
    return ImageProcessingModes.DARK_TEXT;
  } else {
    return ImageProcessingModes.HIGH_CONTRAST;
  }
}

/**
 * –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –∑ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–º –≤–∏–±–æ—Ä–æ–º —Ä–µ–∂–∏–º—É
 * @param {string} imagePath - —à–ª—è—Ö –¥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
 * @returns {Array} - –∑–Ω–∞–π–¥–µ–Ω—ñ –Ω–æ–º–µ—Ä–∏ –Ω–∞–∫–ª–∞–¥–Ω–∏—Ö
 */
async function smartExtract(imagePath) {
  try {
    // –°–ø–æ—á–∞—Ç–∫—É –∞–Ω–∞–ª—ñ–∑—É—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
    const recommendedMode = await suggestProcessingMode(imagePath);
    console.log(`–†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∏–π —Ä–µ–∂–∏–º: ${recommendedMode}`);

    // –ü—Ä–æ–±—É—î–º–æ –∑ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∏–º —Ä–µ–∂–∏–º–æ–º
    const processedPath = await processImageWithMode(
      imagePath,
      recommendedMode
    );
    let numbers = await recognizeNumbers(processedPath);
    await fs.unlink(processedPath).catch(() => {});

    // –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π—à–ª–∏, –ø—Ä–æ–±—É—î–º–æ –≤—Å—ñ —ñ–Ω—à—ñ —Ä–µ–∂–∏–º–∏
    if (numbers.length === 0) {
      console.log("–ü—Ä–æ–±—É—î–º–æ –≤—Å—ñ —Ä–µ–∂–∏–º–∏...");
      numbers = await extractWithMultipleModes(imagePath);
    }

    return numbers;
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ smart extract:", error);
    throw error;
  }
}

/**
 * –û—á–∏—â–µ–Ω–Ω—è –ø–∞–ø–∫–∏ –∑ —Ç–∏–º—á–∞—Å–æ–≤–∏–º–∏ —Ñ–∞–π–ª–∞–º–∏
 * @param {string} uploadsDir - —à–ª—è—Ö –¥–æ –ø–∞–ø–∫–∏
 * @param {number} maxAgeHours - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π –≤—ñ–∫ —Ñ–∞–π–ª—ñ–≤ –≤ –≥–æ–¥–∏–Ω–∞—Ö
 */
async function cleanupOldFiles(uploadsDir, maxAgeHours = 24) {
  try {
    const files = await fs.readdir(uploadsDir);
    const now = Date.now();
    const maxAge = maxAgeHours * 60 * 60 * 1000;

    for (const file of files) {
      const filePath = `${uploadsDir}/${file}`;
      const stats = await fs.stat(filePath);

      if (now - stats.mtimeMs > maxAge) {
        await fs.unlink(filePath);
        console.log(`–í–∏–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä–∏–π —Ñ–∞–π–ª: ${file}`);
      }
    }
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è:", error);
  }
}

module.exports = {
  ImageProcessingModes,
  processImageWithMode,
  extractWithMultipleModes,
  recognizeNumbers,
  extractTrackingNumbers,
  isValidTrackingNumber,
  analyzeImage,
  suggestProcessingMode,
  smartExtract,
  cleanupOldFiles,
};

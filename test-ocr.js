// test-ocr.js
// –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è OCR —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª—É –ª–æ–∫–∞–ª—å–Ω–æ

const {
  smartExtract,
  cleanupOldFiles,
  analyzeImage,
} = require("./utils/ocrHelper");
const path = require("path");
const fs = require("fs");

async function testOCR() {
  // –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ, —á–∏ –ø–µ—Ä–µ–¥–∞–Ω–æ —à–ª—è—Ö –¥–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
  const imagePath = process.argv[2];

  if (!imagePath) {
    console.log("‚ùå –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: node test-ocr.js <path-to-image>");
    console.log("üìù –ü—Ä–∏–∫–ª–∞–¥: node test-ocr.js ./receipts/test-receipt.jpg");
    process.exit(1);
  }

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —ñ—Å–Ω—É–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—É
  if (!fs.existsSync(imagePath)) {
    console.log(`‚ùå –§–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ: ${imagePath}`);
    process.exit(1);
  }

  console.log("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó");
  console.log("‚ïë        üîç –¢–ï–°–¢–£–í–ê–ù–ù–Ø OCR –†–û–ó–ü–Ü–ó–ù–ê–í–ê–ù–ù–Ø                   ‚ïë");
  console.log("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù");
  console.log(`\nüìÑ –§–∞–π–ª: ${imagePath}\n`);

  try {
    const startTime = Date.now();

    // –í–∏–∫–æ–Ω—É—î–º–æ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è
    const trackingNumbers = await smartExtract(imagePath);

    const endTime = Date.now();
    const duration = ((endTime - startTime) / 1000).toFixed(2);

    console.log("\n" + "=".repeat(60));
    console.log("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–ò:");
    console.log("=".repeat(60));

    if (trackingNumbers.length === 0) {
      console.log("‚ùå –ù–æ–º–µ—Ä–∏ –Ω–∞–∫–ª–∞–¥–Ω–∏—Ö –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ");
      console.log("\nüí° –ü–æ—Ä–∞–¥–∏ –¥–ª—è –ø–æ–∫—Ä–∞—â–µ–Ω–Ω—è —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è:");
      console.log("   1. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –Ω–æ–º–µ—Ä —á—ñ—Ç–∫–æ –≤–∏–¥–∏–º–∏–π");
      console.log("   2. –ü–æ–∫—Ä–∞—â—ñ—Ç—å –æ—Å–≤—ñ—Ç–ª–µ–Ω–Ω—è (—É–Ω–∏–∫–∞–π—Ç–µ —Ç—ñ–Ω–µ–π)");
      console.log("   3. –°–ø—Ä–æ–±—É–π—Ç–µ –∑—Ä–æ–±–∏—Ç–∏ —Ñ–æ—Ç–æ –±–ª–∏–∂—á–µ –¥–æ –Ω–æ–º–µ—Ä–∞");
      console.log("   4. –ü–µ—Ä–µ–∫–æ–Ω–∞–π—Ç–µ—Å—è, —â–æ –∫–∞–º–µ—Ä–∞ –≤ —Ñ–æ–∫—É—Å—ñ");
      console.log("   5. –£–Ω–∏–∫–∞–π—Ç–µ –±–ª—ñ–∫—ñ–≤ –Ω–∞ –ø–∞–ø–µ—Ä—ñ");
      console.log("   6. –¢—Ä–∏–º–∞–π—Ç–µ –∫–∞–º–µ—Ä—É –ø–∞—Ä–∞–ª–µ–ª—å–Ω–æ —á–µ–∫—É");
      console.log("\nüîß –¢–µ—Ö–Ω—ñ—á–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:");
      console.log("   ‚Ä¢ –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∞ –≤–∏—Å–æ—Ç–∞ —Ü–∏—Ñ—Ä: 20 –ø—ñ–∫—Å–µ–ª—ñ–≤");
      console.log("   ‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–∞ —Ä–æ–∑–¥—ñ–ª—å–Ω—ñ—Å—Ç—å: 1200+ –ø—ñ–∫—Å–µ–ª—ñ–≤ –ø–æ —à–∏—Ä–∏–Ω—ñ");
      console.log("   ‚Ä¢ –§–æ—Ä–º–∞—Ç: JPG –∞–±–æ PNG");
    } else {
      console.log(`‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –Ω–æ–º–µ—Ä—ñ–≤: ${trackingNumbers.length}\n`);

      trackingNumbers.forEach((number, index) => {
        console.log(`${index + 1}. üì¶ ${number}`);
        console.log(`   –§–æ—Ä–º–∞—Ç: ${formatTrackingNumber(number)}`);
        console.log(`   –í–∞–ª—ñ–¥–Ω–∏–π: ${isValidFormat(number) ? "‚úÖ" : "‚ö†Ô∏è "}`);
      });

      console.log("\n‚úÖ –ì–æ—Ç–æ–≤–æ –¥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ –±–æ—Ç—ñ!");
    }

    console.log(`\n‚è±Ô∏è  –ß–∞—Å –æ–±—Ä–æ–±–∫–∏: ${duration} —Å–µ–∫—É–Ω–¥`);
    console.log("=".repeat(60) + "\n");

    // –ü–æ–∫–∞–∑–∞—Ç–∏ –¥–æ–¥–∞—Ç–∫–æ–≤—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é
    const imageInfo = await analyzeImage(imagePath);
    console.log("üì∏ –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è:");
    console.log(`   ‚Ä¢ –†–æ–∑–º—ñ—Ä: ${imageInfo.width}x${imageInfo.height} –ø—ñ–∫—Å–µ–ª—ñ–≤`);
    console.log(`   ‚Ä¢ –Ø—Å–∫—Ä–∞–≤—ñ—Å—Ç—å: ${imageInfo.brightness.toFixed(1)}/255`);
    console.log(`   ‚Ä¢ –§–æ—Ä–º–∞—Ç: ${imageInfo.format}`);
    console.log(`   ‚Ä¢ –¢–∏–ø: ${imageInfo.isReceipt ? "–ß–µ–∫" : "–ó–≤–∏—á–∞–π–Ω–µ —Ñ–æ—Ç–æ"}`);
    console.log("");
  } catch (error) {
    console.error("\n‚ùå –ü–æ–º–∏–ª–∫–∞:", error.message);
    console.error("\nüìã –ü–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–º–∏–ª–∫—É:");
    console.error(error);
    console.log("\nüí° –ú–æ–∂–ª–∏–≤—ñ –ø—Ä–∏—á–∏–Ω–∏:");
    console.log("   ‚Ä¢ –ü–æ—à–∫–æ–¥–∂–µ–Ω–∏–π —Ñ–∞–π–ª –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è");
    console.log("   ‚Ä¢ –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø–∞–º'—è—Ç—ñ");
    console.log("   ‚Ä¢ Tesseract –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π –ø—Ä–∞–≤–∏–ª—å–Ω–æ");
    console.log("   ‚Ä¢ –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª—É");
  }
}

/**
 * –§–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è –Ω–æ–º–µ—Ä–∞ –Ω–∞–∫–ª–∞–¥–Ω–æ—ó –¥–ª—è –∫—Ä–∞—â–æ—ó —á–∏—Ç–∞–±–µ–ª—å–Ω–æ—Å—Ç—ñ
 */
function formatTrackingNumber(number) {
  return number.replace(/(\d{4})(\d{4})(\d{4})(\d{2})/, "$1 $2 $3 $4");
}

/**
 * –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç—É
 */
function isValidFormat(number) {
  const prefix = number.substring(0, 4);
  const prefixNum = parseInt(prefix);
  return (
    (prefixNum >= 5900 && prefixNum <= 5999) ||
    (prefixNum >= 2000 && prefixNum <= 2099)
  );
}

/**
 * –ú–∞—Å–æ–≤–µ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è (—è–∫—â–æ –ø–µ—Ä–µ–¥–∞–Ω–æ –ø–∞–ø–∫—É)
 */
async function testMultipleImages(dirPath) {
  const fs = require("fs").promises;
  const path = require("path");

  console.log("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó");
  console.log("‚ïë      üìÇ –ú–ê–°–û–í–ï –¢–ï–°–¢–£–í–ê–ù–ù–Ø –ó–û–ë–†–ê–ñ–ï–ù–¨                      ‚ïë");
  console.log("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù");
  console.log(`\nüìÇ –ü–∞–ø–∫–∞: ${dirPath}\n`);

  try {
    const files = await fs.readdir(dirPath);
    const imageFiles = files.filter((f) =>
      /\.(jpg|jpeg|png|bmp|tiff)$/i.test(f)
    );

    if (imageFiles.length === 0) {
      console.log("‚ùå –ó–æ–±—Ä–∞–∂–µ–Ω—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ –ø–∞–ø—Ü—ñ");
      return;
    }

    console.log(`üì∏ –ó–Ω–∞–π–¥–µ–Ω–æ –∑–æ–±—Ä–∞–∂–µ–Ω—å: ${imageFiles.length}\n`);

    const results = [];
    let totalTime = 0;

    for (const [index, file] of imageFiles.entries()) {
      console.log(`\n[${index + 1}/${imageFiles.length}] üîç –û–±—Ä–æ–±–∫–∞: ${file}`);
      console.log("‚îÄ".repeat(60));
      const filePath = path.join(dirPath, file);

      const startTime = Date.now();
      try {
        const numbers = await smartExtract(filePath);
        const duration = (Date.now() - startTime) / 1000;
        totalTime += duration;

        results.push({
          file,
          success: numbers.length > 0,
          numbers,
          count: numbers.length,
          time: duration,
        });

        if (numbers.length > 0) {
          console.log(`   ‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ: ${numbers.join(", ")}`);
          console.log(`   ‚è±Ô∏è  ${duration.toFixed(2)}—Å`);
        } else {
          console.log(`   ‚ùå –ù–æ–º–µ—Ä–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ`);
          console.log(`   ‚è±Ô∏è  ${duration.toFixed(2)}—Å`);
        }
      } catch (error) {
        console.log(`   ‚ùå –ü–æ–º–∏–ª–∫–∞: ${error.message}`);
        results.push({
          file,
          success: false,
          error: error.message,
        });
      }
    }

    // –ü—ñ–¥—Å—É–º–∫–æ–≤–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    console.log("\n" + "=".repeat(70));
    console.log("üìä –ü–Ü–î–°–£–ú–ö–û–í–ê –°–¢–ê–¢–ò–°–¢–ò–ö–ê:");
    console.log("=".repeat(70));

    const successful = results.filter((r) => r.success).length;
    const failed = results.length - successful;
    const totalNumbers = results.reduce((sum, r) => sum + (r.count || 0), 0);
    const avgTime = totalTime / results.length;

    console.log(`\nüìà –ó–∞–≥–∞–ª—å–Ω—ñ –ø–æ–∫–∞–∑–Ω–∏–∫–∏:`);
    console.log(`   ‚Ä¢ –í—Å—å–æ–≥–æ —Ñ–∞–π–ª—ñ–≤: ${results.length}`);
    console.log(
      `   ‚Ä¢ –£—Å–ø—ñ—à–Ω–æ: ${successful} (${(
        (successful / results.length) *
        100
      ).toFixed(1)}%)`
    );
    console.log(
      `   ‚Ä¢ –ù–µ–≤–¥–∞–ª–æ: ${failed} (${((failed / results.length) * 100).toFixed(
        1
      )}%)`
    );
    console.log(`   ‚Ä¢ –ó–Ω–∞–π–¥–µ–Ω–æ –Ω–æ–º–µ—Ä—ñ–≤: ${totalNumbers}`);
    console.log(`   ‚Ä¢ –°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å: ${avgTime.toFixed(2)}—Å`);
    console.log(`   ‚Ä¢ –ó–∞–≥–∞–ª—å–Ω–∏–π —á–∞—Å: ${totalTime.toFixed(2)}—Å`);

    // –î–µ—Ç–∞–ª—å–Ω–∞ —Ç–∞–±–ª–∏—Ü—è
    console.log(`\nüìã –î–µ—Ç–∞–ª—å–Ω—ñ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∏:`);
    console.log("‚îÄ".repeat(70));
    console.log(" ‚Ññ | –§–∞–π–ª                           | –†–µ–∑—É–ª—å—Ç–∞—Ç | –ß–∞—Å   ");
    console.log("‚îÄ".repeat(70));

    results.forEach((r, i) => {
      const num = (i + 1).toString().padStart(2);
      const file = r.file.substring(0, 30).padEnd(30);
      const result = r.success ? `‚úÖ ${r.count}` : "‚ùå 0";
      const time = r.time ? `${r.time.toFixed(2)}—Å` : "N/A";
      console.log(` ${num} | ${file} | ${result.padEnd(9)} | ${time}`);
    });

    console.log("‚îÄ".repeat(70));

    // –£—Å–ø—ñ—à–Ω—ñ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è
    const successResults = results.filter(
      (r) => r.success && r.numbers.length > 0
    );
    if (successResults.length > 0) {
      console.log(`\n‚úÖ –£—Å–ø—ñ—à–Ω–æ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω—ñ –Ω–æ–º–µ—Ä–∏:`);
      successResults.forEach((r) => {
        console.log(`   ${r.file}: ${r.numbers.join(", ")}`);
      });
    }

    // –ù–µ–≤–¥–∞–ª—ñ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è
    const failedResults = results.filter((r) => !r.success);
    if (failedResults.length > 0) {
      console.log(`\n‚ùå –§–∞–π–ª–∏ –±–µ–∑ —Ä–æ–∑–ø—ñ–∑–Ω–∞–Ω–∏—Ö –Ω–æ–º–µ—Ä—ñ–≤:`);
      failedResults.forEach((r) => {
        console.log(`   ${r.file}${r.error ? ` (${r.error})` : ""}`);
      });
    }

    console.log("\n" + "=".repeat(70) + "\n");
  } catch (error) {
    console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –ø–∞–ø–∫–∏:", error);
  }
}

// –ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è
async function main() {
  const targetPath = process.argv[2];

  if (!targetPath) {
    console.log(
      "‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó"
    );
    console.log("‚ïë        üîç –¢–ï–°–¢–£–í–ê–ù–ù–Ø OCR –†–û–ó–ü–Ü–ó–ù–ê–í–ê–ù–ù–Ø                   ‚ïë");
    console.log(
      "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n"
    );
    console.log("–í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:");
    console.log("  node test-ocr.js <—à–ª—è—Ö-–¥–æ-—Ñ–∞–π–ª—É>");
    console.log("  node test-ocr.js <—à–ª—è—Ö-–¥–æ-–ø–∞–ø–∫–∏>\n");
    console.log("–ü—Ä–∏–∫–ª–∞–¥–∏:");
    console.log("  node test-ocr.js ./receipt.jpg");
    console.log("  node test-ocr.js ./test-receipts/\n");
    console.log("üí° –ü–æ—Ä–∞–¥–∏:");
    console.log("  ‚Ä¢ –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ —á—ñ—Ç–∫—ñ —Ñ–æ—Ç–æ –∑ —Ö–æ—Ä–æ—à–∏–º –æ—Å–≤—ñ—Ç–ª–µ–Ω–Ω—è–º");
    console.log("  ‚Ä¢ –ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —Ä–æ–∑–º—ñ—Ä: 800x600 –ø—ñ–∫—Å–µ–ª—ñ–≤");
    console.log("  ‚Ä¢ –ù–æ–º–µ—Ä –º–∞—î –±—É—Ç–∏ –¥–æ–±—Ä–µ –≤–∏–¥–∏–º–∏–º");
    console.log("");
    process.exit(0);
  }

  const stats = fs.statSync(targetPath);

  if (stats.isDirectory()) {
    await testMultipleImages(targetPath);
  } else {
    await testOCR();
  }

  // –û—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö —Ç–∏–º—á–∞—Å–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤
  console.log("üßπ –û—á–∏—â–µ–Ω–Ω—è —Ç–∏–º—á–∞—Å–æ–≤–∏—Ö —Ñ–∞–π–ª—ñ–≤...");
  await cleanupOldFiles("./uploads", 1);
  console.log("‚úÖ –ì–æ—Ç–æ–≤–æ!\n");
}

// –ó–∞–ø—É—Å–∫
main().catch(console.error);

#!/usr/bin/env node
// diagnose-ocr.js
// –ü–æ–≤–Ω–∞ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ OCR —Å–∏—Å—Ç–µ–º–∏

const { execSync } = require("child_process");
const fs = require("fs");
const path = require("path");

const colors = {
  green: "\x1b[32m",
  red: "\x1b[31m",
  yellow: "\x1b[33m",
  blue: "\x1b[34m",
  reset: "\x1b[0m",
};

function log(msg, color = colors.reset) {
  console.log(color + msg + colors.reset);
}

console.log("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó");
console.log("‚ïë           üîç –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ê OCR –°–ò–°–¢–ï–ú–ò                     ‚ïë");
console.log("‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n");

let issues = [];
let warnings = [];

// 1. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Tesseract
log("1Ô∏è‚É£  –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Tesseract...", colors.blue);
try {
  const version = execSync("tesseract --version", { encoding: "utf-8" });
  log("‚úÖ Tesseract –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π", colors.green);
  console.log("   –í–µ—Ä—Å—ñ—è:", version.split("\n")[0]);
} catch (e) {
  log("‚ùå Tesseract –ù–ï –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π!", colors.red);
  issues.push("Tesseract –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π");
  console.log("\n   üì• –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è:");
  console.log("   Ubuntu: sudo apt install tesseract-ocr");
  console.log("   macOS: brew install tesseract");
  console.log("   Windows: https://github.com/UB-Mannheim/tesseract/wiki\n");
}

// 2. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º–æ–≤–Ω–∏—Ö –ø–∞–∫–µ—Ç—ñ–≤
log("\n2Ô∏è‚É£  –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –º–æ–≤–Ω–∏—Ö –ø–∞–∫–µ—Ç—ñ–≤...", colors.blue);
try {
  const langs = execSync("tesseract --list-langs", { encoding: "utf-8" });
  const langList = langs
    .split("\n")
    .slice(1)
    .filter((l) => l.trim());

  const required = ["eng", "ukr", "rus"];
  const missing = required.filter((lang) => !langList.includes(lang));

  if (missing.length === 0) {
    log("‚úÖ –í—Å—ñ –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –º–æ–≤–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ", colors.green);
    console.log("   –î–æ—Å—Ç—É–ø–Ω—ñ:", langList.join(", "));
  } else {
    log(`‚ö†Ô∏è  –í—ñ–¥—Å—É—Ç–Ω—ñ –º–æ–≤–∏: ${missing.join(", ")}`, colors.yellow);
    warnings.push(`–í—ñ–¥—Å—É—Ç–Ω—ñ –º–æ–≤–Ω—ñ –ø–∞–∫–µ—Ç–∏: ${missing.join(", ")}`);
    console.log("\n   üì• –í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è:");
    console.log(
      "   Ubuntu: sudo apt install tesseract-ocr-ukr tesseract-ocr-rus"
    );
    console.log("   macOS: brew install tesseract-lang");
    console.log(
      "   Windows: –∑–∞–≤–∞–Ω—Ç–∞–∂—Ç–µ .traineddata –∑ https://github.com/tesseract-ocr/tessdata\n"
    );
  }
} catch (e) {
  log("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –º–æ–≤–∏", colors.red);
  issues.push("–ü—Ä–æ–±–ª–µ–º–∞ –∑ –º–æ–≤–Ω–∏–º–∏ –ø–∞–∫–µ—Ç–∞–º–∏ Tesseract");
}

// 3. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Node.js –ø–∞–∫–µ—Ç—ñ–≤
log("\n3Ô∏è‚É£  –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Node.js –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π...", colors.blue);

const packages = ["tesseract.js", "sharp", "viber-bot", "mongoose", "express"];

packages.forEach((pkg) => {
  try {
    require.resolve(pkg);
    log(`‚úÖ ${pkg} –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π`, colors.green);
  } catch (e) {
    log(`‚ùå ${pkg} –ù–ï –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π`, colors.red);
    issues.push(`–ü–∞–∫–µ—Ç ${pkg} –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π`);
  }
});

// 4. –¢–µ—Å—Ç Sharp –æ–±—Ä–æ–±–∫–∏
log("\n4Ô∏è‚É£  –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è Sharp (–æ–±—Ä–æ–±–∫–∞ –∑–æ–±—Ä–∞–∂–µ–Ω—å)...", colors.blue);
try {
  const sharp = require("sharp");

  // –°—Ç–≤–æ—Ä—é—î–º–æ —Ç–µ—Å—Ç–æ–≤–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è
  const testImage = Buffer.from(
    "iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mNk+M9QDwADhgGAWjR9awAAAABJRU5ErkJggg==",
    "base64"
  );

  sharp(testImage)
    .greyscale()
    .toBuffer()
    .then(() => {
      log("‚úÖ Sharp –ø—Ä–∞—Ü—é—î –∫–æ—Ä–µ–∫—Ç–Ω–æ", colors.green);
    })
    .catch((err) => {
      log("‚ùå –ü–æ–º–∏–ª–∫–∞ Sharp: " + err.message, colors.red);
      issues.push("Sharp –Ω–µ –ø—Ä–∞—Ü—é—î");
    });
} catch (e) {
  log("‚ùå Sharp –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π –∞–±–æ –Ω–µ –ø—Ä–∞—Ü—é—î", colors.red);
  issues.push("–ü—Ä–æ–±–ª–µ–º–∞ –∑ Sharp");
}

// 5. –¢–µ—Å—Ç Tesseract.js
log("\n5Ô∏è‚É£  –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è Tesseract.js...", colors.blue);
try {
  const Tesseract = require("tesseract.js");
  log("‚úÖ Tesseract.js —ñ–º–ø–æ—Ä—Ç—É—î—Ç—å—Å—è", colors.green);

  // –ü—Ä–æ—Å—Ç–∏–π —Ç–µ—Å—Ç —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è
  log(
    "   üîÑ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç—É —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è (–º–æ–∂–µ –∑–∞–π–Ω—è—Ç–∏ 10-15 —Å–µ–∫—É–Ω–¥)...",
    colors.yellow
  );

  Tesseract.recognize(
    "https://tesseract.projectnaptha.com/img/eng_bw.png",
    "eng",
    {
      logger: () => {}, // –í–∏–º–∫–Ω—É—Ç–∏ –ª–æ–≥–∏
    }
  )
    .then(({ data: { text, confidence } }) => {
      if (confidence > 50) {
        log(
          `‚úÖ –¢–µ—Å—Ç —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è –ø—Ä–æ–π—à–æ–≤ —É—Å–ø—ñ—à–Ω–æ (${confidence.toFixed(1)}%)`,
          colors.green
        );
        console.log(`   –†–æ–∑–ø—ñ–∑–Ω–∞–Ω–∏–π —Ç–µ–∫—Å—Ç: "${text.substring(0, 50)}..."`);
      } else {
        log(
          `‚ö†Ô∏è  –ù–∏–∑—å–∫–∞ –≤–ø–µ–≤–Ω–µ–Ω—ñ—Å—Ç—å —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è (${confidence.toFixed(1)}%)`,
          colors.yellow
        );
        warnings.push("–ù–∏–∑—å–∫–∞ —è–∫—ñ—Å—Ç—å OCR —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è");
      }
    })
    .catch((err) => {
      log("‚ùå –ü–æ–º–∏–ª–∫–∞ —Ç–µ—Å—Ç—É: " + err.message, colors.red);
      issues.push("Tesseract.js –Ω–µ –ø—Ä–∞—Ü—é—î");
    });
} catch (e) {
  log("‚ùå –ü–æ–º–∏–ª–∫–∞ Tesseract.js: " + e.message, colors.red);
  issues.push("Tesseract.js –º–∞—î –ø—Ä–æ–±–ª–µ–º–∏");
}

// 6. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –ø—Ä–æ–µ–∫—Ç—É
log("\n6Ô∏è‚É£  –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏ –ø—Ä–æ–µ–∫—Ç—É...", colors.blue);
const requiredFiles = [
  "server.js",
  "package.json",
  ".env",
  "utils/ocrHelper.js",
];

const requiredDirs = ["uploads", "utils"];

requiredFiles.forEach((file) => {
  if (fs.existsSync(file)) {
    log(`‚úÖ ${file} —ñ—Å–Ω—É—î`, colors.green);
  } else {
    log(`‚ö†Ô∏è  ${file} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ`, colors.yellow);
    warnings.push(`–í—ñ–¥—Å—É—Ç–Ω—ñ–π —Ñ–∞–π–ª: ${file}`);
  }
});

requiredDirs.forEach((dir) => {
  if (fs.existsSync(dir)) {
    log(`‚úÖ –ü–∞–ø–∫–∞ ${dir}/ —ñ—Å–Ω—É—î`, colors.green);
  } else {
    log(
      `‚ö†Ô∏è  –ü–∞–ø–∫–∞ ${dir}/ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ (–±—É–¥–µ —Å—Ç–≤–æ—Ä–µ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ)`,
      colors.yellow
    );
    try {
      fs.mkdirSync(dir, { recursive: true });
      log(`   ‚úÖ –ü–∞–ø–∫—É ${dir}/ —Å—Ç–≤–æ—Ä–µ–Ω–æ`, colors.green);
    } catch (e) {
      warnings.push(`–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø–∞–ø–∫—É: ${dir}`);
    }
  }
});

// 7. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ .env
log("\n7Ô∏è‚É£  –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ .env –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó...", colors.blue);
if (fs.existsSync(".env")) {
  const envContent = fs.readFileSync(".env", "utf-8");

  const requiredVars = [
    "VIBER_AUTH_TOKEN",
    "NOVA_POSHTA_API_KEY",
    "WEBHOOK_URL",
    "MONGODB_URI",
  ];

  requiredVars.forEach((varName) => {
    const regex = new RegExp(`^${varName}=(.+)$`, "m");
    const match = envContent.match(regex);

    if (match && match[1].trim()) {
      log(`‚úÖ ${varName} –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ`, colors.green);
    } else {
      log(`‚ö†Ô∏è  ${varName} –ø–æ—Ä–æ–∂–Ω—î –∞–±–æ –≤—ñ–¥—Å—É—Ç–Ω—î`, colors.yellow);
      warnings.push(`–ü–æ—Ç—Ä—ñ–±–Ω–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏: ${varName}`);
    }
  });
} else {
  log("‚ùå .env —Ñ–∞–π–ª –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", colors.red);
  issues.push(".env —Ñ–∞–π–ª –≤—ñ–¥—Å—É—Ç–Ω—ñ–π");
}

// 8. –¢–µ—Å—Ç –ø—Ä—è–º–æ–≥–æ –≤–∏–∫–ª–∏–∫—É tesseract (—è–∫—â–æ —î —Ç–µ—Å—Ç–æ–≤–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è)
log("\n8Ô∏è‚É£  –¢–µ—Å—Ç –ø—Ä—è–º–æ–≥–æ –≤–∏–∫–ª–∏–∫—É Tesseract...", colors.blue);
const testImagePath = process.argv[2];

if (testImagePath && fs.existsSync(testImagePath)) {
  log(`   –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è —Ñ–∞–π–ª—É: ${testImagePath}`, colors.blue);
  try {
    const output = execSync(
      `tesseract "${testImagePath}" stdout -l eng+ukr --psm 6`,
      {
        encoding: "utf-8",
      }
    );

    if (output.trim()) {
      log("‚úÖ Tesseract —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤ —Ç–µ–∫—Å—Ç:", colors.green);
      console.log("   " + output.substring(0, 200).replace(/\n/g, "\n   "));

      // –ü–æ—à—É–∫ 14-–∑–Ω–∞—á–Ω–∏—Ö –Ω–æ–º–µ—Ä—ñ–≤
      const numbers = output.match(/\d{14}/g);
      if (numbers) {
        log(`\n   üéØ –ó–Ω–∞–π–¥–µ–Ω–æ –Ω–æ–º–µ—Ä(–∏): ${numbers.join(", ")}`, colors.green);
      }
    } else {
      log("‚ö†Ô∏è  Tesseract –Ω–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤ —Ç–µ–∫—Å—Ç", colors.yellow);
      warnings.push("Tesseract –Ω–µ –º–æ–∂–µ —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ —Ç–µ—Å—Ç–æ–≤–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è");
    }
  } catch (e) {
    log("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–ª–∏–∫—É Tesseract: " + e.message, colors.red);
  }
} else {
  log("‚ÑπÔ∏è  –¢–µ—Å—Ç–æ–≤–µ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –Ω–µ –Ω–∞–¥–∞–Ω–æ", colors.blue);
  console.log("   –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è: node diagnose-ocr.js path/to/test-image.jpg");
}

// –ü—ñ–¥—Å—É–º–æ–∫
setTimeout(() => {
  console.log("\n" + "=".repeat(70));
  log("üìä –ü–Ü–î–°–£–ú–û–ö –î–Ü–ê–ì–ù–û–°–¢–ò–ö–ò", colors.blue);
  console.log("=".repeat(70));

  if (issues.length === 0 && warnings.length === 0) {
    log("\nüéâ –í–°–ï –ß–£–î–û–í–û! –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –¥–æ —Ä–æ–±–æ—Ç–∏!", colors.green);
    console.log("\n–ù–∞—Å—Ç—É–ø–Ω—ñ –∫—Ä–æ–∫–∏:");
    console.log("  1. –ó–∞–ø–æ–≤–Ω—ñ—Ç—å —Ç–æ–∫–µ–Ω–∏ –≤ .env");
    console.log("  2. –ó–∞–ø—É—Å—Ç—ñ—Ç—å —Ç–µ—Å—Ç: node test-ocr.js your-receipt.jpg");
    console.log("  3. –ó–∞–ø—É—Å—Ç—ñ—Ç—å –±–æ—Ç: npm start\n");
  } else {
    if (issues.length > 0) {
      log(`\n‚ùå –ö–†–ò–¢–ò–ß–ù–Ü –ü–†–û–ë–õ–ï–ú–ò (${issues.length}):`, colors.red);
      issues.forEach((issue, i) => {
        console.log(`   ${i + 1}. ${issue}`);
      });
    }

    if (warnings.length > 0) {
      log(`\n‚ö†Ô∏è  –ü–û–ü–ï–†–ï–î–ñ–ï–ù–ù–Ø (${warnings.length}):`, colors.yellow);
      warnings.forEach((warning, i) => {
        console.log(`   ${i + 1}. ${warning}`);
      });
    }

    console.log("\nüìã –†–ï–ö–û–ú–ï–ù–î–ê–¶–Ü–á:");

    if (issues.includes("Tesseract –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π")) {
      console.log("\n   üîß –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å Tesseract:");
      console.log(
        "      Ubuntu: sudo apt install tesseract-ocr tesseract-ocr-ukr"
      );
      console.log("      macOS: brew install tesseract tesseract-lang");
      console.log(
        "      Windows: https://github.com/UB-Mannheim/tesseract/wiki"
      );
    }

    if (issues.some((i) => i.includes("–ü–∞–∫–µ—Ç"))) {
      console.log("\n   üì¶ –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –≤—ñ–¥—Å—É—Ç–Ω—ñ –ø–∞–∫–µ—Ç–∏:");
      console.log("      npm install");
    }

    if (warnings.some((w) => w.includes("VIBER_AUTH_TOKEN"))) {
      console.log("\n   üîë –û—Ç—Ä–∏–º–∞–π—Ç–µ —Ç–æ–∫–µ–Ω–∏:");
      console.log("      Viber: https://partners.viber.com/");
      console.log("      Nova Poshta: https://devcenter.novaposhta.ua/");
    }

    console.log("\n   ‚ÑπÔ∏è  –ü—ñ—Å–ª—è –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –∑–∞–ø—É—Å—Ç—ñ—Ç—å –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫—É –∑–Ω–æ–≤—É");
  }

  console.log("\n" + "=".repeat(70) + "\n");

  // –î–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è
  console.log("üí° –ö–æ—Ä–∏—Å–Ω—ñ –∫–æ–º–∞–Ω–¥–∏:");
  console.log("   ‚Ä¢ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Tesseract: tesseract --version");
  console.log("   ‚Ä¢ –°–ø–∏—Å–æ–∫ –º–æ–≤: tesseract --list-langs");
  console.log("   ‚Ä¢ –¢–µ—Å—Ç OCR: tesseract image.jpg stdout -l ukr+eng");
  console.log("   ‚Ä¢ –¢–µ—Å—Ç –Ω–∞—à–æ—ó —Å–∏—Å—Ç–µ–º–∏: node test-ocr.js image.jpg");
  console.log("");
}, 3000); // –î–∞—î–º–æ —á–∞—Å –Ω–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ñ —Ç–µ—Å—Ç–∏

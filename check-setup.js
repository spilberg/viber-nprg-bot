#!/usr/bin/env node
// check-setup.js
// –°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —á–∏ –≤—Å–µ –≥–æ—Ç–æ–≤–µ –¥–æ –∑–∞–ø—É—Å–∫—É

const { execSync } = require("child_process");
const fs = require("fs");
const path = require("path");

const colors = {
  green: "\x1b[32m",
  red: "\x1b[31m",
  yellow: "\x1b[33m",
  blue: "\x1b[34m",
  reset: "\x1b[0m",
};

function log(message, color = colors.reset) {
  console.log(color + message + colors.reset);
}

function success(message) {
  log("‚úÖ " + message, colors.green);
}

function error(message) {
  log("‚ùå " + message, colors.red);
}

function warning(message) {
  log("‚ö†Ô∏è  " + message, colors.yellow);
}

function info(message) {
  log("‚ÑπÔ∏è  " + message, colors.blue);
}

function checkCommand(command, name) {
  try {
    const version = execSync(command, { encoding: "utf-8" }).trim();
    success(`${name} –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π: ${version}`);
    return true;
  } catch (e) {
    error(`${name} –ù–ï –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π`);
    return false;
  }
}

function checkFile(filepath, name) {
  if (fs.existsSync(filepath)) {
    success(`${name} –∑–Ω–∞–π–¥–µ–Ω–æ`);
    return true;
  } else {
    error(`${name} –ù–ï –∑–Ω–∞–π–¥–µ–Ω–æ: ${filepath}`);
    return false;
  }
}

function checkEnvVariable(name) {
  const envPath = path.join(process.cwd(), ".env");
  if (!fs.existsSync(envPath)) {
    return false;
  }

  const envContent = fs.readFileSync(envPath, "utf-8");
  const regex = new RegExp(`^${name}=(.+)$`, "m");
  const match = envContent.match(regex);

  if (match && match[1].trim()) {
    success(`${name} –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ`);
    return true;
  } else {
    error(`${name} –ù–ï –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω–æ –∞–±–æ –ø–æ—Ä–æ–∂–Ω—î`);
    return false;
  }
}

function checkPort(port) {
  try {
    const command =
      process.platform === "win32"
        ? `netstat -ano | findstr :${port}`
        : `lsof -i :${port}`;

    const result = execSync(command, { encoding: "utf-8" });
    if (result.trim()) {
      warning(`–ü–æ—Ä—Ç ${port} –≤–∂–µ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç—å—Å—è`);
      return false;
    }
  } catch (e) {
    success(`–ü–æ—Ä—Ç ${port} –≤—ñ–ª—å–Ω–∏–π`);
    return true;
  }
}

function checkMongoDB() {
  try {
    // –°–ø—Ä–æ–±–∞ –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ MongoDB
    const mongoose = require("mongoose");
    mongoose.connect("mongodb://localhost:27017/test", {
      serverSelectionTimeoutMS: 3000,
    });

    return new Promise((resolve) => {
      mongoose.connection.on("connected", () => {
        success("MongoDB –∑–∞–ø—É—â–µ–Ω–∏–π —ñ –¥–æ—Å—Ç—É–ø–Ω–∏–π");
        mongoose.connection.close();
        resolve(true);
      });

      mongoose.connection.on("error", () => {
        error("MongoDB –ù–ï –¥–æ—Å—Ç—É–ø–Ω–∏–π (–ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ —á–∏ –∑–∞–ø—É—â–µ–Ω–∏–π —Å–µ—Ä–≤—ñ—Å)");
        resolve(false);
      });

      // –¢–∞–π–º–∞—É—Ç
      setTimeout(() => {
        error("MongoDB –ù–ï –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î (—Ç–∞–π–º–∞—É—Ç)");
        mongoose.connection.close();
        resolve(false);
      }, 3000);
    });
  } catch (e) {
    error("–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ MongoDB: " + e.message);
    return Promise.resolve(false);
  }
}

async function checkNodeModules() {
  const modulesPath = path.join(process.cwd(), "node_modules");
  if (!fs.existsSync(modulesPath)) {
    error("node_modules –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ (–∑–∞–ø—É—Å—Ç—ñ—Ç—å: npm install)");
    return false;
  }

  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫–ª—é—á–æ–≤–∏—Ö –ø–∞–∫–µ—Ç—ñ–≤
  const packages = [
    "express",
    "viber-bot",
    "mongoose",
    "tesseract.js",
    "sharp",
  ];
  let allInstalled = true;

  for (const pkg of packages) {
    const pkgPath = path.join(modulesPath, pkg);
    if (fs.existsSync(pkgPath)) {
      success(`–ü–∞–∫–µ—Ç ${pkg} –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π`);
    } else {
      error(`–ü–∞–∫–µ—Ç ${pkg} –ù–ï –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π`);
      allInstalled = false;
    }
  }

  return allInstalled;
}

function printSummary(checks) {
  const passed = checks.filter((c) => c.passed).length;
  const total = checks.length;
  const percentage = ((passed / total) * 100).toFixed(0);

  console.log("\n" + "=".repeat(60));
  log("üìä –ü–Ü–î–°–£–ú–û–ö –ü–ï–†–ï–í–Ü–†–ö–ò", colors.blue);
  console.log("=".repeat(60));

  if (passed === total) {
    success(`–í—Å—ñ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω–æ: ${passed}/${total} (100%)`);
    log("\nüéâ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –¥–æ –∑–∞–ø—É—Å–∫—É!", colors.green);
    console.log("\n–ù–∞—Å—Ç—É–ø–Ω—ñ –∫—Ä–æ–∫–∏:");
    info("1. –ó–∞–ø—É—Å—Ç—ñ—Ç—å —Å–µ—Ä–≤–µ—Ä: npm start");
    info("2. –ó–∞–ø—É—Å—Ç—ñ—Ç—å ngrok: ngrok http 3000");
    info("3. –û–Ω–æ–≤—ñ—Ç—å WEBHOOK_URL –≤ .env");
    info("4. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç—ñ—Ç—å —Å–µ—Ä–≤–µ—Ä");
    info("5. –í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å webhook: –≤—ñ–¥–∫—Ä–∏–π—Ç–µ /set_webhook");
  } else {
    warning(`–ü—Ä–æ–π–¥–µ–Ω–æ –ø–µ—Ä–µ–≤—ñ—Ä–æ–∫: ${passed}/${total} (${percentage}%)`);
    log("\n‚ö†Ô∏è  –î–µ—è–∫—ñ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ –∞–±–æ –Ω–µ –Ω–∞–ª–∞—à—Ç–æ–≤–∞–Ω—ñ", colors.yellow);
    console.log("\n–í–∏–ø—Ä–∞–≤—Ç–µ –ø–æ–º–∏–ª–∫–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º:");

    checks
      .filter((c) => !c.passed)
      .forEach((c) => {
        error(`‚Ä¢ ${c.name}`);
        if (c.fix) {
          info(`  –†—ñ—à–µ–Ω–Ω—è: ${c.fix}`);
        }
      });
  }

  console.log("=".repeat(60) + "\n");
}

async function main() {
  console.log("‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó");
  console.log("‚ïë     üîç –ü–ï–†–ï–í–Ü–†–ö–ê –°–ò–°–¢–ï–ú–ù–ò–• –í–ò–ú–û–ì –¢–ê –ù–ê–õ–ê–®–¢–£–í–ê–ù–¨         ‚ïë");
  console.log(
    "‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù\n"
  );

  const checks = [];

  // 1. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Node.js
  log("1Ô∏è‚É£  –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Node.js...", colors.blue);
  checks.push({
    name: "Node.js",
    passed: checkCommand("node --version", "Node.js"),
    fix: "–í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –∑ https://nodejs.org/",
  });

  // 2. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ npm
  log("\n2Ô∏è‚É£  –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ npm...", colors.blue);
  checks.push({
    name: "npm",
    passed: checkCommand("npm --version", "npm"),
    fix: "–ü–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å Node.js",
  });

  // 3. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ MongoDB
  log("\n3Ô∏è‚É£  –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ MongoDB...", colors.blue);
  const mongoInstalled = checkCommand(
    "mongo --version || mongod --version",
    "MongoDB"
  );
  checks.push({
    name: "MongoDB –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π",
    passed: mongoInstalled,
    fix: "–í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å MongoDB –∑ https://www.mongodb.com/try/download/community",
  });

  if (mongoInstalled) {
    const mongoRunning = await checkMongoDB();
    checks.push({
      name: "MongoDB –∑–∞–ø—É—â–µ–Ω–∏–π",
      passed: mongoRunning,
      fix: "–ó–∞–ø—É—Å—Ç—ñ—Ç—å: sudo systemctl start mongodb (Linux) –∞–±–æ —á–µ—Ä–µ–∑ Services (Windows)",
    });
  }

  // 4. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–∞–π–ª—ñ–≤ –ø—Ä–æ–µ–∫—Ç—É
  log("\n4Ô∏è‚É£  –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ–∞–π–ª—ñ–≤ –ø—Ä–æ–µ–∫—Ç—É...", colors.blue);
  checks.push({
    name: "package.json",
    passed: checkFile("package.json", "package.json"),
    fix: "–°—Ç–≤–æ—Ä—ñ—Ç—å package.json –∑ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—è–º–∏",
  });

  checks.push({
    name: "server.js",
    passed: checkFile("server.js", "server.js"),
    fix: "–°—Ç–≤–æ—Ä—ñ—Ç—å server.js –∑ –∫–æ–¥–æ–º –±–æ—Ç–∞",
  });

  checks.push({
    name: ".env",
    passed: checkFile(".env", ".env —Ñ–∞–π–ª"),
    fix: "–°—Ç–≤–æ—Ä—ñ—Ç—å .env —Ñ–∞–π–ª –∑ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—î—é",
  });

  // 5. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞
  log("\n5Ô∏è‚É£  –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–º—ñ–Ω–Ω–∏—Ö —Å–µ—Ä–µ–¥–æ–≤–∏—â–∞ (.env)...", colors.blue);
  if (fs.existsSync(".env")) {
    checks.push({
      name: "VIBER_AUTH_TOKEN",
      passed: checkEnvVariable("VIBER_AUTH_TOKEN"),
      fix: "–û—Ç—Ä–∏–º–∞–π—Ç–µ —Ç–æ–∫–µ–Ω –Ω–∞ https://partners.viber.com/",
    });

    checks.push({
      name: "NOVA_POSHTA_API_KEY",
      passed: checkEnvVariable("NOVA_POSHTA_API_KEY"),
      fix: "–û—Ç—Ä–∏–º–∞–π—Ç–µ –∫–ª—é—á –Ω–∞ https://devcenter.novaposhta.ua/",
    });

    checks.push({
      name: "WEBHOOK_URL",
      passed: checkEnvVariable("WEBHOOK_URL"),
      fix: "–í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –ø—ñ—Å–ª—è –∑–∞–ø—É—Å–∫—É ngrok (https://xxxxx.ngrok.io)",
    });
  }

  // 6. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ node_modules
  log("\n6Ô∏è‚É£  –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π...", colors.blue);
  const modulesInstalled = await checkNodeModules();
  checks.push({
    name: "–ó–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ npm",
    passed: modulesInstalled,
    fix: "–ó–∞–ø—É—Å—Ç—ñ—Ç—å: npm install",
  });

  // 7. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ—Ä—Ç—É
  log("\n7Ô∏è‚É£  –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—ñ –ø–æ—Ä—Ç—É 3000...", colors.blue);
  checks.push({
    name: "–ü–æ—Ä—Ç 3000",
    passed: checkPort(3000),
    fix: "–ó—É–ø–∏–Ω—ñ—Ç—å –ø—Ä–æ–≥—Ä–∞–º—É –Ω–∞ –ø–æ—Ä—Ç—É 3000 –∞–±–æ –∑–º—ñ–Ω—ñ—Ç—å PORT –≤ .env",
  });

  // 8. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ ngrok (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)
  log("\n8Ô∏è‚É£  –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ ngrok (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)...", colors.blue);
  const ngrokInstalled = checkCommand("ngrok version", "ngrok");
  checks.push({
    name: "ngrok",
    passed: ngrokInstalled,
    fix: "–í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –∑ https://ngrok.com/download",
  });

  // 9. –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–∞–ø–∫–∏ uploads
  log("\n9Ô∏è‚É£  –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–∞–ø–∫–∏ –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω—å...", colors.blue);
  const uploadsDir = path.join(process.cwd(), "uploads");
  if (!fs.existsSync(uploadsDir)) {
    try {
      fs.mkdirSync(uploadsDir, { recursive: true });
      success("–ü–∞–ø–∫–∞ uploads —Å—Ç–≤–æ—Ä–µ–Ω–∞");
      checks.push({ name: "–ü–∞–ø–∫–∞ uploads", passed: true });
    } catch (e) {
      error("–ù–µ –≤–¥–∞–ª–æ—Å—è —Å—Ç–≤–æ—Ä–∏—Ç–∏ –ø–∞–ø–∫—É uploads");
      checks.push({
        name: "–ü–∞–ø–∫–∞ uploads",
        passed: false,
        fix: "–°—Ç–≤–æ—Ä—ñ—Ç—å –ø–∞–ø–∫—É uploads –≤—Ä—É—á–Ω—É",
      });
    }
  } else {
    success("–ü–∞–ø–∫–∞ uploads —ñ—Å–Ω—É—î");
    checks.push({ name: "–ü–∞–ø–∫–∞ uploads", passed: true });
  }

  // –ü—ñ–¥—Å—É–º–æ–∫
  printSummary(checks);
}

// –ó–∞–ø—É—Å–∫
main().catch(console.error);

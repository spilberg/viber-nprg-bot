const express = require("express");
const ViberBot = require("viber-bot").Bot;
const BotEvents = require("viber-bot").Events;
const TextMessage = require("viber-bot").Message.Text;
const mongoose = require("mongoose");
const axios = require("axios");
require("dotenv").config();

const app = express();
app.use(express.json());

// –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ MongoDB
mongoose.connect(
  process.env.MONGODB_URI || "mongodb://localhost:27017/viber_nova_poshta",
  {
    useNewUrlParser: true,
    useUnifiedTopology: true,
  }
);

// –°—Ö–µ–º–∞ –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–æ–∫
const shipmentSchema = new mongoose.Schema({
  trackingNumber: {
    type: String,
    required: true,
    unique: true,
  },
  senderCity: {
    type: String,
    required: true,
  },
  recipientCity: {
    type: String,
    required: true,
  },
  status: String,
  createdAt: {
    type: Date,
    default: Date.now,
  },
  updatedAt: {
    type: Date,
    default: Date.now,
  },
  viberUserId: String,
  senderAddress: String,
  recipientAddress: String,
  weight: Number,
  cost: Number,
});

const Shipment = mongoose.model("Shipment", shipmentSchema);

// –°—Ö–µ–º–∞ –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ Viber
const userSchema = new mongoose.Schema({
  viberUserId: {
    type: String,
    required: true,
    unique: true,
  },
  name: String,
  avatar: String,
  language: String,
  country: String,
  createdAt: {
    type: Date,
    default: Date.now,
  },
});

const User = mongoose.model("User", userSchema);

// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è Viber –±–æ—Ç–∞
const bot = new ViberBot({
  authToken: process.env.VIBER_AUTH_TOKEN,
  name: "Nova Poshta Tracker",
  avatar: "https://example.com/avatar.jpg", // –∑–∞–º—ñ–Ω—ñ—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω–∏–π URL
});

// API –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—è –ù–æ–≤–æ—ó –ü–æ—à—Ç–∏
const NOVA_POSHTA_API_KEY = process.env.NOVA_POSHTA_API_KEY;
const NOVA_POSHTA_API_URL = process.env.NOVA_POSHTA_API_URL;

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –≤—ñ–¥–ø—Ä–∞–≤–∫—É –∑ API –ù–æ–≤–æ—ó –ü–æ—à—Ç–∏
async function getShipmentInfo(trackingNumber) {
  try {
    const response = await axios.post(NOVA_POSHTA_API_URL, {
      apiKey: NOVA_POSHTA_API_KEY,
      modelName: "TrackingDocument",
      calledMethod: "getStatusDocuments",
      methodProperties: {
        Documents: [
          {
            DocumentNumber: trackingNumber,
            Phone: "",
          },
        ],
      },
    });

    if (response.data.success && response.data.data.length > 0) {
      return response.data.data[0];
    }
    return null;
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –¥–∞–Ω–∏—Ö –∑ API –ù–æ–≤–æ—ó –ü–æ—à—Ç–∏:", error);
    return null;
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å–ø–∏—Å–∫—É –º—ñ—Å—Ç
async function getCities() {
  try {
    const response = await axios.post(NOVA_POSHTA_API_URL, {
      apiKey: NOVA_POSHTA_API_KEY,
      modelName: "Address",
      calledMethod: "getCities",
      methodProperties: {},
    });

    return response.data.success ? response.data.data : [];
  } catch (error) {
    console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ —Å–ø–∏—Å–∫—É –º—ñ—Å—Ç:", error);
    return [];
  }
}

// –û–±—Ä–æ–±–∫–∞ –ø–æ–¥—ñ–π –±–æ—Ç–∞
bot.on(BotEvents.SUBSCRIBED, async (response) => {
  try {
    const user = new User({
      viberUserId: response.userProfile.id,
      name: response.userProfile.name,
      avatar: response.userProfile.avatar,
      language: response.userProfile.language,
      country: response.userProfile.country,
    });

    await user.save();
    console.log(`–ù–æ–≤–∏–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –ø—ñ–¥–ø–∏—Å–∞–≤—Å—è: ${response.userProfile.name}`);

    bot.sendMessage(
      response.userProfile,
      new TextMessage(
        "–í—ñ—Ç–∞—é! üëã\n\n" +
          "–Ø –±–æ—Ç –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è –ø–æ—Å–∏–ª–æ–∫ –ù–æ–≤–æ—ó –ü–æ—à—Ç–∏.\n\n" +
          "–ù–∞–¥—ñ—à–ª—ñ—Ç—å –º–µ–Ω—ñ –Ω–æ–º–µ—Ä –Ω–∞–∫–ª–∞–¥–Ω–æ—ó (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 20450123456789), —ñ —è –ø–æ–∫–∞–∂—É —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≤–∞—à—É –≤—ñ–¥–ø—Ä–∞–≤–∫—É."
      )
    );
  } catch (error) {
    if (error.code !== 11000) {
      // –Ü–≥–Ω–æ—Ä—É—î–º–æ –ø–æ–º–∏–ª–∫—É –¥—É–±–ª—é–≤–∞–Ω–Ω—è
      console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:", error);
    }
  }
});

bot.on(BotEvents.MESSAGE_RECEIVED, async (message, response) => {
  const trackingNumberRegex = /^\d{14}$/; // –ù–æ–º–µ—Ä –Ω–∞–∫–ª–∞–¥–Ω–æ—ó –ù–ü –º–∞—î 14 —Ü–∏—Ñ—Ä

  if (message instanceof TextMessage) {
    const text = message.text.trim();

    if (trackingNumberRegex.test(text)) {
      // –¶–µ –Ω–æ–º–µ—Ä –Ω–∞–∫–ª–∞–¥–Ω–æ—ó
      try {
        bot.sendMessage(
          response.userProfile,
          new TextMessage("üîç –®—É–∫–∞—é —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≤–∞—à—É –≤—ñ–¥–ø—Ä–∞–≤–∫—É...")
        );

        const shipmentInfo = await getShipmentInfo(text);

        if (shipmentInfo) {
          // –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö
          const shipmentData = {
            trackingNumber: text,
            senderCity: shipmentInfo.CitySender || "–ù–µ –≤–∫–∞–∑–∞–Ω–æ",
            recipientCity: shipmentInfo.CityRecipient || "–ù–µ –≤–∫–∞–∑–∞–Ω–æ",
            status: shipmentInfo.Status || "–ù–µ–≤—ñ–¥–æ–º–æ",
            viberUserId: response.userProfile.id,
            senderAddress: shipmentInfo.WarehouseSender || "",
            recipientAddress: shipmentInfo.WarehouseRecipient || "",
            weight: parseFloat(shipmentInfo.DocumentWeight) || 0,
            cost: parseFloat(shipmentInfo.DocumentCost) || 0,
            updatedAt: new Date(),
          };

          await Shipment.findOneAndUpdate(
            { trackingNumber: text },
            shipmentData,
            { upsert: true, new: true }
          );

          const responseMessage =
            `üì¶ –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –≤—ñ–¥–ø—Ä–∞–≤–∫—É:\n\n` +
            `üìã –ù–æ–º–µ—Ä: ${text}\n` +
            `üìç –ú–∞—Ä—à—Ä—É—Ç: ${shipmentInfo.CitySender} ‚Üí ${shipmentInfo.CityRecipient}\n` +
            `üìä –°—Ç–∞—Ç—É—Å: ${shipmentInfo.Status}\n` +
            `‚öñÔ∏è –í–∞–≥–∞: ${shipmentInfo.DocumentWeight || "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"} –∫–≥\n` +
            `üí∞ –í–∞—Ä—Ç—ñ—Å—Ç—å: ${shipmentInfo.DocumentCost || "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"} –≥—Ä–Ω\n` +
            `üìÖ –î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è: ${
              shipmentInfo.DateCreated || "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"
            }\n\n` +
            `–î–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è —ñ–Ω—à–æ—ó –ø–æ—Å–∏–ª–∫–∏ –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–æ–≤–∏–π –Ω–æ–º–µ—Ä –Ω–∞–∫–ª–∞–¥–Ω–æ—ó.`;

          bot.sendMessage(
            response.userProfile,
            new TextMessage(responseMessage)
          );
        } else {
          bot.sendMessage(
            response.userProfile,
            new TextMessage(
              "‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ü—é –≤—ñ–¥–ø—Ä–∞–≤–∫—É.\n\n" +
                "–ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å –Ω–æ–º–µ—Ä–∞ –Ω–∞–∫–ª–∞–¥–Ω–æ—ó —Ç–∞ —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑."
            )
          );
        }
      } catch (error) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏:", error);
        bot.sendMessage(
          response.userProfile,
          new TextMessage(
            "‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–∞–ø–∏—Ç—É. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."
          )
        );
      }
    } else if (text.toLowerCase().includes("–¥–æ–ø–æ–º–æ–≥–∞") || text === "/help") {
      bot.sendMessage(
        response.userProfile,
        new TextMessage(
          "‚ÑπÔ∏è –î–æ–≤—ñ–¥–∫–∞:\n\n" +
            "‚Ä¢ –ù–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–æ–º–µ—Ä –Ω–∞–∫–ª–∞–¥–Ω–æ—ó –ù–æ–≤–æ—ó –ü–æ—à—Ç–∏ (14 —Ü–∏—Ñ—Ä)\n" +
            "‚Ä¢ –ü—Ä–∏–∫–ª–∞–¥: 20450123456789\n" +
            "‚Ä¢ –Ø –ø–æ–∫–∞–∂—É —Å—Ç–∞—Ç—É—Å —Ç–∞ –º–∞—Ä—à—Ä—É—Ç –≤—ñ–¥–ø—Ä–∞–≤–∫–∏\n" +
            "‚Ä¢ –í—Å—ñ –∑–∞–ø–∏—Ç–∏ –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö\n\n" +
            "–ö–æ–º–∞–Ω–¥–∏:\n" +
            "‚Ä¢ '–¥–æ–ø–æ–º–æ–≥–∞' - –ø–æ–∫–∞–∑–∞—Ç–∏ —Ü—é –¥–æ–≤—ñ–¥–∫—É\n" +
            "‚Ä¢ '–º–æ—ó –ø–æ—Å–∏–ª–∫–∏' - –ø–æ–∫–∞–∑–∞—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω—ñ –ø–æ—Å–∏–ª–∫–∏"
        )
      );
    } else if (text.toLowerCase().includes("–º–æ—ó –ø–æ—Å–∏–ª–∫–∏")) {
      try {
        const userShipments = await Shipment.find({
          viberUserId: response.userProfile.id,
        })
          .sort({ updatedAt: -1 })
          .limit(5);

        if (userShipments.length > 0) {
          let message = "üì¶ –í–∞—à—ñ –æ—Å—Ç–∞–Ω–Ω—ñ –ø–æ—Å–∏–ª–∫–∏:\n\n";
          userShipments.forEach((shipment, index) => {
            message += `${index + 1}. ${shipment.trackingNumber}\n`;
            message += `   ${shipment.senderCity} ‚Üí ${shipment.recipientCity}\n`;
            message += `   –°—Ç–∞—Ç—É—Å: ${shipment.status}\n\n`;
          });
          bot.sendMessage(response.userProfile, new TextMessage(message));
        } else {
          bot.sendMessage(
            response.userProfile,
            new TextMessage(
              "–£ –≤–∞—Å –ø–æ–∫–∏ —â–æ –Ω–µ–º–∞—î –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–∏—Ö –ø–æ—Å–∏–ª–æ–∫.\n–ù–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–æ–º–µ—Ä –Ω–∞–∫–ª–∞–¥–Ω–æ—ó –¥–ª—è –≤—ñ–¥—Å—Ç–µ–∂–µ–Ω–Ω—è."
            )
          );
        }
      } catch (error) {
        console.error("–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –ø–æ—Å–∏–ª–æ–∫ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞:", error);
        bot.sendMessage(
          response.userProfile,
          new TextMessage("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ—Ç—Ä–∏–º–∞–Ω–Ω—ñ –≤–∞—à–∏—Ö –ø–æ—Å–∏–ª–æ–∫.")
        );
      }
    } else {
      bot.sendMessage(
        response.userProfile,
        new TextMessage(
          "–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å –Ω–æ–º–µ—Ä –Ω–∞–∫–ª–∞–¥–Ω–æ—ó –ù–æ–≤–æ—ó –ü–æ—à—Ç–∏ (14 —Ü–∏—Ñ—Ä).\n\n" +
            "–ü—Ä–∏–∫–ª–∞–¥: 20450123456789\n\n" +
            "–î–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–æ–≤—ñ–¥–∫–∏ –Ω–∞–ø–∏—à—ñ—Ç—å '–¥–æ–ø–æ–º–æ–≥–∞'."
        )
      );
    }
  }
});

// REST API –¥–ª—è –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä—É–≤–∞–Ω–Ω—è
app.get("/api/shipments", async (req, res) => {
  try {
    const page = parseInt(req.query.page) || 1;
    const limit = parseInt(req.query.limit) || 10;
    const skip = (page - 1) * limit;

    const shipments = await Shipment.find()
      .sort({ updatedAt: -1 })
      .skip(skip)
      .limit(limit);

    const total = await Shipment.countDocuments();

    res.json({
      shipments,
      pagination: {
        page,
        limit,
        total,
        pages: Math.ceil(total / limit),
      },
    });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

app.get("/api/shipments/:trackingNumber", async (req, res) => {
  try {
    const shipment = await Shipment.findOne({
      trackingNumber: req.params.trackingNumber,
    });
    if (!shipment) {
      return res.status(404).json({ error: "–í—ñ–¥–ø—Ä–∞–≤–∫–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞" });
    }
    res.json(shipment);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

app.get("/api/users", async (req, res) => {
  try {
    const users = await User.find().sort({ createdAt: -1 });
    res.json(users);
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
app.get("/api/stats", async (req, res) => {
  try {
    const totalShipments = await Shipment.countDocuments();
    const totalUsers = await User.countDocuments();
    const todayShipments = await Shipment.countDocuments({
      createdAt: { $gte: new Date(new Date().setHours(0, 0, 0, 0)) },
    });

    res.json({
      totalShipments,
      totalUsers,
      todayShipments,
    });
  } catch (error) {
    res.status(500).json({ error: error.message });
  }
});

// Webhook –¥–ª—è Viber
app.use("/viber/webhook", bot.middleware());

// –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è webhook
app.get("/set_webhook", (req, res) => {
  bot
    .setWebhook(process.env.WEBHOOK_URL + "/viber/webhook")
    .then(() => res.send("Webhook –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ"))
    .catch((err) => res.status(500).send(err));
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–æ –Ω–∞ –ø–æ—Ä—Ç—ñ ${PORT}`);
  console.log(`–í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å webhook: ${process.env.WEBHOOK_URL}/set_webhook`);
});

module.exports = { app, bot };
